import telebot, sqlite3, os
from flask import Flask
from threading import Thread

# ========== CONFIG ==========
BOT_TOKEN = "8324637176:AAFeKHN29fpeGA4b7w5RfvSgrOH8LRkCYmY"
ADMIN_ID = 7459795138
YOUTUBE_CHANNEL = "https://youtube.com/@kishorsinhzala.?si=uKMVwnB7wV_yoSQN"
TELEGRAM_GROUP = "@boomupbot10"

# ========== VIDEO CODES ==========
VIDEO_CODES = {
    "boom123": "https://youtu.be/QSH5mW7Il00?si=AcLkdNBNSJqGs5y3",
    "xpress456": "https://youtu.be/cDHi31m0rxI?si=xHUXL54PjtFS-wlN",
    "kzboom789": "https://youtu.be/k84NTqHakEE?si=q_1FZRrIdjPjWZKa",
    "flash321": "https://youtu.be/wskpFAMrb6I?si=cx4bYzmwBgY68Qmq",
    "hindi007": "https://youtu.be/smWCVRNMqh0?si=hBmNoBIMyLLKCoM2"
}

# ========== KEEP ALIVE (for Replit/Render) ==========
app = Flask('')
@app.route('/')
def home(): return "Bot is running"
def run(): app.run(host='0.0.0.0', port=8080)
def keep_alive(): Thread(target=run).start()
keep_alive()

# ========== DB SETUP ==========
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id TEXT PRIMARY KEY,
    points INTEGER DEFAULT 0,
    videos INTEGER DEFAULT 0,
    shares INTEGER DEFAULT 0,
    ref INTEGER DEFAULT 0,
    referred_by TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS redemptions (
    id TEXT,
    code TEXT,
    UNIQUE(id, code)
)
""")
conn.commit()

# ========== DB FUNCTIONS ==========
def check_user(user_id):
    cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (id) VALUES (?)", (user_id,))
        conn.commit()

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    row = cursor.fetchone()
    return {"id": row[0], "points": row[1], "videos": row[2], "shares": row[3], "ref": row[4], "referred_by": row[5]} if row else None

def add_points(user_id, field, max_limit, increment, points):
    cursor.execute(f"SELECT {field}, points FROM users WHERE id = ?", (user_id,))
    row = cursor.fetchone()
    if row and row[0] < max_limit:
        cursor.execute(f"UPDATE users SET {field} = {field} + ?, points = points + ? WHERE id = ?", (increment, points, user_id))
        conn.commit()
        return True
    return False

def apply_referral(new_user_id, ref_id):
    if new_user_id == ref_id: return
    user = get_user(new_user_id)
    if user["referred_by"]: return
    if get_user(ref_id):
        cursor.execute("UPDATE users SET ref = ref + 1, points = points + 50 WHERE id = ?", (ref_id,))
        cursor.execute("UPDATE users SET referred_by = ? WHERE id = ?", (ref_id, new_user_id))
        conn.commit()

# ========== TELEGRAM BOT ==========
bot = telebot.TeleBot(BOT_TOKEN)

def is_user_in_channel(user_id):
    try:
        member = bot.get_chat_member(TELEGRAM_GROUP, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"Error: {e}")
        return False

def main_menu():
    menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row("üé• ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§¶‡•á‡§ñ‡§æ", "üì§ ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§ø‡§Ø‡§æ")
    menu.row("üìä ‡§Æ‡•á‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä", "üîó ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï")
    menu.row("üéØ ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§∏‡§¨‡§Æ‡§ø‡§ü")
    return menu

@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.from_user.id)

    if not is_user_in_channel(user_id):
        join_btn = telebot.types.InlineKeyboardMarkup()
        join_btn.add(telebot.types.InlineKeyboardButton("üì• ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç", url=f"https://t.me/{TELEGRAM_GROUP.replace('@', '')}"))
        bot.send_message(message.chat.id, "üö´ ‡§™‡§π‡§≤‡•á ‡§π‡§Æ‡§æ‡§∞‡•á Telegram Group ‡§ï‡•ã ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç:", reply_markup=join_btn)
        return

    check_user(user_id)

    if len(message.text.split()) > 1:
        ref_id = message.text.split()[1]
        apply_referral(user_id, ref_id)

    bot.send_message(message.chat.id,
        f"üëã Welcome to BoomUp Bot!\n\nüé• Watch = 10 pts\nüì§ Share = 25 pts\nüîó Referral = 50 pts\nüéØ Promote @ 1000 pts\n\nüì∫ {YOUTUBE_CHANNEL}\nüí¨ {TELEGRAM_GROUP}",
        reply_markup=main_menu())

@bot.message_handler(func=lambda msg: True)
def handle_all(message):
    user_id = str(message.from_user.id)
    check_user(user_id)
    text = message.text

    if text == "üé• ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§¶‡•á‡§ñ‡§æ":
        msg = "üé• ‡§á‡§® ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•ã ‡§¶‡•á‡§ñ‡•ã ‡§î‡§∞ ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§è ‡§ó‡§è ‡§ï‡•ã‡§° ‡§ï‡•ã ‡§≠‡•á‡§ú‡•ã:\n\n"
        for code, link in VIDEO_CODES.items():
            msg += f"üîó {link}\n"
        msg += "\nüîë ‡§ï‡•ã‡§° ‡§Æ‡§ø‡§≤‡§®‡•á ‡§™‡§∞ ‡§Æ‡•Å‡§ù‡•á ‡§≠‡•á‡§ú‡•ã (‡§ú‡•à‡§∏‡•á: boom123)"
        bot.reply_to(message, msg)

    elif text == "üì§ ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§ø‡§Ø‡§æ":
        if add_points(user_id, "shares", 5, 1, 25):
            bot.reply_to(message, "‚úÖ ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶, +25 ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏!")
        else:
            bot.reply_to(message, "‚ùå ‡§Ü‡§™‡§®‡•á 5 ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡•Ä ‡§≤‡§ø‡§Æ‡§ø‡§ü ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞ ‡§≤‡•Ä ‡§π‡•à‡•§")

    elif text == "üìä ‡§Æ‡•á‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä":
        u = get_user(user_id)
        bot.reply_to(message, f"""üìä ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:
Total Points: {u['points']}
üé• Videos: {u['videos']}/10
üì§ Shares: {u['shares']}/5
üîó Referrals: {u['ref']}""")

    elif text == "üîó ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï":
        bot.reply_to(message, f"üîó ‡§Ü‡§™‡§ï‡§æ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï:\nhttps://t.me/Hkzyt_bot?start={user_id}")

    elif text == "üéØ ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§∏‡§¨‡§Æ‡§ø‡§ü":
        u = get_user(user_id)
        if u['points'] >= 1000:
            bot.reply_to(message, "‚úÖ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡•á‡§Ç:")
        else:
            bot.reply_to(message, "‚ùå ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è 1000 ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡§Ç‡•§")

@bot.message_handler(func=lambda m: m.text.lower() in VIDEO_CODES)
def handle_secret_code(message):
    user_id = str(message.from_user.id)
    code = message.text.lower()

    cursor.execute("SELECT id FROM redemptions WHERE id = ? AND code = ?", (user_id, code))
    if cursor.fetchone():
        bot.reply_to(message, "‚ö†Ô∏è ‡§Ü‡§™‡§®‡•á ‡§Ø‡•á ‡§ï‡•ã‡§° ‡§™‡§π‡§≤‡•á ‡§π‡•Ä ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‡•§")
        return

    if add_points(user_id, "videos", 10, 1, 10):
        cursor.execute("INSERT INTO redemptions (id, code) VALUES (?, ?)", (user_id, code))
        conn.commit()
        bot.reply_to(message, "‚úÖ ‡§∏‡§π‡•Ä ‡§ï‡•ã‡§°! ‡§Ü‡§™‡§ï‡•ã 10 ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§Æ‡§ø‡§≤‡•á üéâ")
    else:
        bot.reply_to(message, "‚ö†Ô∏è ‡§Ü‡§™‡§®‡•á ‡§™‡§π‡§≤‡•á ‡§π‡•Ä 10 ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§™‡•Ç‡§∞‡•á ‡§ï‡§∞ ‡§≤‡§ø‡§è ‡§π‡•à‡§Ç‡•§")

@bot.message_handler(content_types=['text'])
def promotion_handler(message):
    user_id = str(message.from_user.id)
    u = get_user(user_id)
    if u and u['points'] >= 1000 and message.text.startswith("http"):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("‚úÖ Approve", callback_data=f"approve:{user_id}"),
            telebot.types.InlineKeyboardButton("‚ùå Reject", callback_data=f"reject:{user_id}")
        )
        bot.send_message(ADMIN_ID, f"üì£ User {user_id} sent a promo:\n{message.text}", reply_markup=markup)
        bot.reply_to(message, "üì§ ‡§Ü‡§™‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ 12 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç ‡§∞‡§ø‡§µ‡•ç‡§Ø‡•Ç ‡§π‡•ã‡§ó‡§æ‡•§")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    action, user_id = call.data.split(":")
    if action == "approve":
        bot.send_message(user_id, "‚úÖ ‡§Ü‡§™‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§Ö‡§™‡•ç‡§∞‡•Ç‡§µ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à! 3 ‡§¶‡§ø‡§® ‡§§‡§ï ‡§≤‡§æ‡§á‡§µ ‡§∞‡§π‡•á‡§ó‡§æ.")
    elif action == "reject":
        bot.send_message(user_id, "‚ùå ‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§≤‡§ø‡§Ç‡§ï reject ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

print("ü§ñ Bot